# TODO: 
#   DeadLetterConfig to Lambda - SNS + SQS
#   Move constants to AWS Environment variables
#   Split it into the 2 Lambdas with using the SQS
#   Add managed policies for the lambda execution role

Parameters:
  
  FileExchangeBucketName:
    Type: String
    Default: "alexandrecabdidate.se-file-exchange"
    
  ExchangableObjectsTTL:
    Type: Number
    Description: Time to live files in storage. In days
    Default: 1
    
  EmailSender:
    Description: "Verified SES E-Mail address"
    Default: "alexander.senko@fastdev.se"
    Type: String
 
  EmailRecipient: 
    Description: "Verified SES E-Mail address for the Sandbox or any other EMail for Normal mode"
    Default: "alexandresenko@gmail.com"
    Type: String
    
  EmailTemplateLinkName:
    Description: Name of template for the E-Mail with link
    Default: "LinkDownloadTemplate"
    Type: String
   
Resources:
  FileExchangeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Ref FileExchangeBucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt LinkGenerator.Arn
      LifecycleConfiguration:
        Rules:
        - Id: ObjectExpirationRule
          ExpirationInDays: !Ref ExchangableObjectsTTL
          Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref FileExchangeBucketLogs
        LogFilePrefix: _access_logs
          
  FileExchangeBucketLogs:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:      
        ServerSideEncryptionConfiguration: 
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${FileExchangeBucketName}-access-logs
      AccessControl: LogDeliveryWrite
      
  FileExchangeBucketLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref FileExchangeBucketLogs      
      PolicyDocument: 
        Statement: 
           - 
            Action:            
              - "s3:*"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${FileExchangeBucketName}-access-logs/*"
            Principal: 
              Service: "s3.amazonaws.com"
           - 
            Action: 
              - "s3:*"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${FileExchangeBucketName}-access-logs"
            Principal: 
              Service: "s3.amazonaws.com"
                       
  FileExchangeBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LinkGenerator
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${FileExchangeBucketName}"          
    
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: FileExchangeBucketPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:*'
              Resource: !Sub "arn:aws:s3:::${FileExchangeBucketName}/*"            
      - PolicyName: EmailSendingPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'SES:SendEmail'
                - 'SES:SendRawEmail'
                - 'SES:SendTemplatedEmail'
              Resource: !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
  
  LinkGenerator: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: "LinkGenerator"
      Handler: "index.lambda_handler"        
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile:
          Fn::Sub:
          - |
            import logging
            import json
            import boto3
          
            from botocore.exceptions import ClientError
            from botocore.client import Config
          
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
          
            s3 = boto3.client('s3', config=Config(signature_version='s3v4'))
            ses_client = boto3.client('ses',region_name='${AWS::Region}')

            def lambda_handler(event, context):
              
                bucket_name = event['Records'][0]['s3']['bucket']['name']              
                file_name = event['Records'][0]['s3']['object']['key']                  
                            
                link = s3.generate_presigned_url(
                  ClientMethod='get_object',
                    Params={
                     'Bucket': bucket_name,
                     'Key': file_name
                  },
                  ExpiresIn=18000 
                ) 
                # TODO Get it from config   
              
                # TODO Get it from config  
                recipient = "${EmailRecipient}"
                sender = '${EmailSender}'
                
                template_data = '{ \"LINK\":\"REPLACEMENT_LINK\" }'.replace('REPLACEMENT_LINK', link)
                
                logger.info('Template link is {}'.format(link)) 
              
                #TODO Read response    
                response = ses_client.send_templated_email(
                  Destination={
                      'ToAddresses': [ recipient ],
                  },                   
                  Template='${EmailTemplateLinkName}',
                  TemplateData = template_data,
                  Source = sender,
                  ConfigurationSetName="${EmailConfigurationSetName}",
                )
              
                return {
                    'statusCode': 200,
                    'body': json.dumps('S3 Lambda sender invoked')
                }
          - EmailConfigurationSetName: !ImportValue ConfigSetName
      Runtime: "python3.6"
      Timeout: 25
      TracingConfig:
        Mode: "Active"
# https://github.com/aws-samples/aws-serverless-workshops/blob/master/DevOps/3_XRay/README.md
# https://aws.amazon.com/ru/premiumsupport/knowledge-center/presigned-url-s3-bucket-expiration/
# https://docs.aws.amazon.com/en_us/xray/latest/devguide/xray-services-lambda.html      
# https://docs.aws.amazon.com/en_us/ses/latest/DeveloperGuide/send-using-sdk-python.html 