#TODO: 
# Add X-Ray to Lambda
# DeadLetterConfig to Lambda
# Make the FileExchangeBucket pubically available

Parameters:
  
  FileExchangeBucketName:
    Type: String
    Default: "alexandrecabdidate.se-file-exchange"
    
  ExchangableObjectsTTL:
    Type: Number
    Description: Time to live files in storage. In days
    Default: 1
    
  EmailSender:
    Description: "Verified SES E-Mail address"
    Default: "alexander.senko@fastdev.se"
    Type: String
 
  EmailRecipient: 
    Description: "Verified SES E-Mail address for the Sandbox or any other EMail for Normal mode"
    Default: "alexandresenko@gmail.com"
    Type: String
    
  EmailConfigurationSetName:
    Description: "Configuration set name"
    Default: "MainSender"
    Type: String
    
    
Resources:
  FileExchangeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Ref FileExchangeBucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt LinkGenerator.Arn
      LifecycleConfiguration:
        Rules:
        - Id: ObjectExpirationRule
          ExpirationInDays: !Ref ExchangableObjectsTTL
          Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref FileExchangeBucketLogs
        LogFilePrefix: _access_logs
          
  FileExchangeBucketLogs:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:      
        ServerSideEncryptionConfiguration: 
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${FileExchangeBucketName}-access-logs
      AccessControl: LogDeliveryWrite
      
  FileExchangeBucketLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref FileExchangeBucketLogs      
      PolicyDocument: 
        Statement: 
           - 
            Action:            
              - "s3:*"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${FileExchangeBucketName}-access-logs/*"
            Principal: 
              Service: "s3.amazonaws.com"
           - 
            Action: 
              - "s3:*"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${FileExchangeBucketName}-access-logs"
            Principal: 
              Service: "s3.amazonaws.com"
                       
  FileExchangeBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LinkGenerator
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${FileExchangeBucketName}"          
    
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: FileExchangeBucketPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:*'
              Resource: !Sub "arn:aws:s3:::${FileExchangeBucketName}/*"            
      - PolicyName: EmailSendingPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'SES:SendEmail'
                - 'SES:SendRawEmail'
              Resource: !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*'
  
  LinkGenerator: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: "LinkGenerator"
      Handler: "index.lambda_handler"        
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import logging
          import json
          import boto3
          from botocore.exceptions import ClientError
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              
              bucket_name = event['Records'][0]['s3']['bucket']['name']              
              file_name = event['Records'][0]['s3']['object']['key']    
              
              logger.info('S3 parsed event{}'.format(bucket_name + '/' + file_name ))
            
              # TODO: Take it from config.
              subject = "EMail from link generator"

              # TODO: Take it from config
              body_text = 'Bucket name is {Bucket}, file name is {File}'.replace('{Bucket}', bucket_name)
              body_text = body_text.replace('{File}', file_name)               
              
            
              # TODO: Push it into the SES template
              body_html = """<html>
              <head></head>
              <body>
                <h1>Link generator</h1>
                <p>{BODY_TEXT}</p>
              </body>
              </html>
                          """
              body_html = body_html.replace('{BODY_TEXT}', body_text)

              client = boto3.client('ses',region_name='${AWS::Region}')
              
              recipient = "${EmailRecipient}"
              
              response = client.send_email(
                  Destination={
                      'ToAddresses': [ recipient ],
                  },
                  Message={
                      'Body': {
                          'Html': {
                              'Charset': "UTF-8",
                              'Data': body_html,
                          },
                          'Text': {
                              'Charset': "UTF-8",
                              'Data': body_text,
                          },
                      },
                      'Subject': {
                          'Charset': "UTF-8",
                          'Data': subject,
                      },
                  },
                  Source='${EmailSender}',
                  ConfigurationSetName="${EmailConfigurationSetName}",
              )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('S3 Lambda sender invoked')
              }   
      Runtime: "python3.6"
      Timeout: 25
      #TracingConfig:
      #  Mode: "Active"
      
#https://docs.aws.amazon.com/en_us/ses/latest/DeveloperGuide/send-using-sdk-python.html 