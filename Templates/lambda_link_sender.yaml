#TODO: 
# Add X-Ray to Lambda
# DeadLetterConfig to Lambda
# Make the FileExchangeBucket pubically available

Parameters:
  
  FileExchangeBucketName:
    Type: String
    Default: "alexandrecabdidate.se-file-exchange"
    
  ExchangableObjectsTTL:
    Type: Number
    Description: Time to live files in storage. In days
    Default: 1
    

Resources:
  FileExchangeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Ref FileExchangeBucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt LinkGenerator.Arn
      LifecycleConfiguration:
        Rules:
        - Id: ObjectExpirationRule
          ExpirationInDays: !Ref ExchangableObjectsTTL
          Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref FileExchangeBucketLogs
        LogFilePrefix: _access_logs
          
  FileExchangeBucketLogs:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:      
        ServerSideEncryptionConfiguration: 
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${FileExchangeBucketName}-access-logs
      AccessControl: LogDeliveryWrite
      
  FileExchangeBucketLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref FileExchangeBucketLogs      
      PolicyDocument: 
        Statement: 
           - 
            Action:            
              - "s3:*"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${FileExchangeBucketName}-access-logs/*"
            Principal: 
              Service: "s3.amazonaws.com"
           - 
            Action: 
              - "s3:*"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${FileExchangeBucketName}-access-logs"
            Principal: 
              Service: "s3.amazonaws.com"
                       
  FileExchangeBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LinkGenerator
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${FileExchangeBucketName}"          
    
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: FileExchangeBucketPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:*'
              Resource: !Sub "arn:aws:s3:::${FileExchangeBucketName}/*"            

  LinkGenerator: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: "LinkGenerator"
      Handler: "index.lambda_handler"        
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import logging
          import json
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info('S3 got event{}'.format(event))
              return {
                  'statusCode': 200,
                  'body': json.dumps('S3 Lambda sender invoked')
              }   
      Runtime: "python3.6"
      Timeout: 25
      #TracingConfig:
      #  Mode: "Active"